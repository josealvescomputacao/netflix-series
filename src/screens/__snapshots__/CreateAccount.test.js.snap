// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Testing CreateAccount Component should render correctly with props and empty state 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ScreensCreateAccount
    auth={
      Object {
        "isAuth": false,
        "isLoadding": false,
      }
    }
    reset={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        false,
        <styled.div>
          <div>
            <FormAccount
              createAccount={[Function]}
              handleChange={[Function]}
              state={
                Object {
                  "email": "",
                  "name": "",
                  "password": "",
                  "passwordConfirm": "",
                }
              }
            />
          </div>
        </styled.div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            false,
            undefined,
            <div>
              <FormAccount
                createAccount={[Function]}
                handleChange={[Function]}
                state={
                  Object {
                    "email": "",
                    "name": "",
                    "password": "",
                    "passwordConfirm": "",
                  }
                }
              />
            </div>,
          ],
        },
        "ref": null,
        "rendered": Array [
          false,
          undefined,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <FormAccount
                createAccount={[Function]}
                handleChange={[Function]}
                state={
                  Object {
                    "email": "",
                    "name": "",
                    "password": "",
                    "passwordConfirm": "",
                  }
                }
              />,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "createAccount": [Function],
                "handleChange": [Function],
                "state": Object {
                  "email": "",
                  "name": "",
                  "password": "",
                  "passwordConfirm": "",
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          false,
          <styled.div>
            <div>
              <FormAccount
                createAccount={[Function]}
                handleChange={[Function]}
                state={
                  Object {
                    "email": "",
                    "name": "",
                    "password": "",
                    "passwordConfirm": "",
                  }
                }
              />
            </div>
          </styled.div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              false,
              undefined,
              <div>
                <FormAccount
                  createAccount={[Function]}
                  handleChange={[Function]}
                  state={
                    Object {
                      "email": "",
                      "name": "",
                      "password": "",
                      "passwordConfirm": "",
                    }
                  }
                />
              </div>,
            ],
          },
          "ref": null,
          "rendered": Array [
            false,
            undefined,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <FormAccount
                  createAccount={[Function]}
                  handleChange={[Function]}
                  state={
                    Object {
                      "email": "",
                      "name": "",
                      "password": "",
                      "passwordConfirm": "",
                    }
                  }
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "createAccount": [Function],
                  "handleChange": [Function],
                  "state": Object {
                    "email": "",
                    "name": "",
                    "password": "",
                    "passwordConfirm": "",
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
